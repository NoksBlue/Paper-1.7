From d3178474470dfd72897c22c73fb2620da31f4a80 Mon Sep 17 00:00:00 2001
From: Noksio <noksiopro@gmail.com>
Date: Sat, 29 Jun 2019 21:27:50 -0400
Subject: [PATCH] Fix PlayerMoveEvent


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 01500971..f283fa02 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -3,26 +3,22 @@ package net.minecraft.server;
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.IOException;
+// CraftBukkit start
+import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Random;
-import java.util.concurrent.Callable;
-
-import net.minecraft.util.com.google.common.base.Charsets;
-import net.minecraft.util.com.google.common.collect.Lists;
-import net.minecraft.util.io.netty.buffer.Unpooled;
-import net.minecraft.util.io.netty.util.concurrent.GenericFutureListener;
-import net.minecraft.util.org.apache.commons.lang3.StringUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import java.io.UnsupportedEncodingException;
+import java.util.Set;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.HashSet;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
@@ -30,8 +26,6 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.craftbukkit.util.Waitable;
-
-import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
@@ -44,12 +38,14 @@ import org.bukkit.event.inventory.InventoryCreativeEvent;
 import org.bukkit.event.inventory.InventoryType.SlotType;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
 import org.bukkit.event.player.PlayerAnimationEvent;
-import org.bukkit.event.player.PlayerChatEvent;
+import org.bukkit.event.player.PlayerAttackEntityEvent;
 import org.bukkit.event.player.PlayerCommandPreprocessEvent;
 import org.bukkit.event.player.PlayerInteractEntityEvent;
 import org.bukkit.event.player.PlayerItemHeldEvent;
+import org.bukkit.event.player.PlayerJumpEvent;
 import org.bukkit.event.player.PlayerKickEvent;
 import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerOnGroundEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerToggleFlightEvent;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
@@ -58,12 +54,18 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
 // CraftBukkit end
-
 import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
 
+import net.minecraft.util.com.google.common.base.Charsets;
+import net.minecraft.util.com.google.common.collect.Lists;
+import net.minecraft.util.io.netty.buffer.Unpooled;
+import net.minecraft.util.io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.util.org.apache.commons.lang3.StringUtils;
+import rip.noks.rinny.RinnyConfig;
+
 public class PlayerConnection implements PacketPlayInListener {
 
-    private static final Logger c = LogManager.getLogger();
+    private static final Logger logger = LogManager.getLogger();
     public final NetworkManager networkManager;
     private final MinecraftServer minecraftServer;
     public EntityPlayer player;
@@ -74,7 +76,8 @@ public class PlayerConnection implements PacketPlayInListener {
     private long i;
     private static Random j = new Random();
     private long k;
-    private volatile int chatThrottle; private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle"); // CraftBukkit - multithreaded field
+    private volatile int chatThrottle; 
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle"); // CraftBukkit - multithreaded field
     private int x;
     private IntHashMap n = new IntHashMap();
     private double y;
@@ -119,7 +122,7 @@ public class PlayerConnection implements PacketPlayInListener {
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
     }
-    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    private final static Set<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
 
     public void a() {
@@ -186,7 +189,7 @@ public class PlayerConnection implements PacketPlayInListener {
     public void a(PacketPlayInFlying packetplayinflying) {
         // CraftBukkit start - Check for NaN
         if (Double.isNaN(packetplayinflying.x) || Double.isNaN(packetplayinflying.y) || Double.isNaN(packetplayinflying.z) || Double.isNaN(packetplayinflying.stance)) {
-            c.warn(player.getName() + " was caught trying to crash the server with an invalid position.");
+            logger.warn(player.getName() + " was caught trying to crash the server with an invalid position.");
             getPlayer().kickPlayer("NaN in position (Hacking?)"); //Spigot "Nope" -> Descriptive reason
             return;
         }
@@ -194,7 +197,8 @@ public class PlayerConnection implements PacketPlayInListener {
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
         this.g = true;
-        if (!this.player.viewingCredits) {
+        //if (!this.player.viewingCredits) {
+        if (!this.player.viewingCredits && !this.player.dead) { // CraftBukkit - Added ' && !this.player.dead'
             double d0;
 
             if (!this.checkMovement) {
@@ -207,8 +211,7 @@ public class PlayerConnection implements PacketPlayInListener {
             // CraftBukkit start - fire PlayerMoveEvent
             Player player = this.getPlayer();
             // Spigot Start
-            if ( !hasMoved )
-            {
+            if (!hasMoved) {
                 Location curPos = player.getLocation();
                 lastPosX = curPos.getX();
                 lastPosY = curPos.getY();
@@ -233,48 +237,51 @@ public class PlayerConnection implements PacketPlayInListener {
                 to.setYaw(packetplayinflying.yaw);
                 to.setPitch(packetplayinflying.pitch);
             }
+            
+            if (this.checkMovement && !this.player.dead) {
+            	// Prevent 40 event-calls for less than a single pixel of movement >.>
+                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+                
+            	if (deltaAngle > 10f) {
+                	this.lastYaw = to.getYaw();
+                    this.lastPitch = to.getPitch();
+                    // TODO: PlayerHeadRotationEvent
+                }
+                if (delta > 1f / 256) {
+                    this.lastPosX = to.getX();
+                    this.lastPosY = to.getY();
+                    this.lastPosZ = to.getZ();
+
+                    // Skip the first time we do this
+                    if (true) { // Spigot - don't skip any move events
+                        Location oldTo = to.clone(); // PaperSpigot
+                        PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                        this.server.getPluginManager().callEvent(event);
+
+                        // If the event is cancelled we move the player back to their old location.
+                        if (event.isCancelled()) {
+                            //this.player.playerConnection.sendPacket(new PacketPlayOutPosition(from.getX(), from.getY() + 1.6200000047683716D, from.getZ(), from.getYaw(), from.getPitch(), false));
+                            teleport(from);
+                        	return;
+                        }
 
-            // Prevent 40 event-calls for less than a single pixel of movement >.>
-            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
-
-            if ((delta > 1f / 256 || deltaAngle > 10f) && (this.checkMovement && !this.player.dead)) {
-                this.lastPosX = to.getX();
-                this.lastPosY = to.getY();
-                this.lastPosZ = to.getZ();
-                this.lastYaw = to.getYaw();
-                this.lastPitch = to.getPitch();
-
-                // Skip the first time we do this
-                if (true) { // Spigot - don't skip any move events
-                    Location oldTo = to.clone(); // PaperSpigot
-                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
-                    this.server.getPluginManager().callEvent(event);
-
-                    // If the event is cancelled we move the player back to their old location.
-                    if (event.isCancelled()) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutPosition(from.getX(), from.getY() + 1.6200000047683716D, from.getZ(), from.getYaw(), from.getPitch(), false));
-                        return;
-                    }
-
-                    /* If a Plugin has changed the To destination then we teleport the Player
-                    there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
-                    We only do this if the Event was not cancelled. */
-                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) { // PaperSpigot
-                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
-                        return;
-                    }
+                        /* If a Plugin has changed the To destination then we teleport the Player
+                        there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                        We only do this if the Event was not cancelled. */
+                        if (!oldTo.equals(event.getTo()) && !event.isCancelled()) { // PaperSpigot
+                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
+                            return;
+                        }
 
-                    /* Check to see if the Players Location has some how changed during the call of the event.
-                    This can happen due to a plugin teleporting the player instead of using .setTo() */
-                    if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
-                        this.justTeleported = false;
-                        return;
+                        /* Check to see if the Players Location has some how changed during the call of the event.
+                        This can happen due to a plugin teleporting the player instead of using .setTo() */
+                        if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                            this.justTeleported = false;
+                            return;
+                        }
                     }
                 }
-            }
-
-            if (this.checkMovement && !this.player.dead) {
                 // CraftBukkit end
                 double d1;
                 double d2;
@@ -342,7 +349,7 @@ public class PlayerConnection implements PacketPlayInListener {
                     d4 = packetplayinflying.f() - packetplayinflying.d();
                     if (!this.player.isSleeping() && (d4 > 1.65D || d4 < 0.1D)) {
                         this.disconnect("Illegal stance");
-                        c.warn(this.player.getName() + " had an illegal stance: " + d4);
+                        logger.warn(this.player.getName() + " had an illegal stance: " + d4);
                         return;
                     }
 
@@ -375,8 +382,9 @@ public class PlayerConnection implements PacketPlayInListener {
                 double d10 = d7 * d7 + d8 * d8 + d9 * d9;
 
                 // Spigot: make "moved too quickly" limit configurable
+                //Bukkit.broadcastMessage("DEBUG (Moved Too Quickly): d10 = " + d10); // TODO: remove after correct
                 if (d10 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.N() || !this.minecraftServer.M().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
-                    c.warn(this.player.getName() + " moved too quickly! " + d4 + "," + d5 + "," + d6 + " (" + d7 + ", " + d8 + ", " + d9 + ")");
+                    logger.warn(this.player.getName() + " moved too quickly! " + d4 + "," + d5 + "," + d6 + " (" + d7 + ", " + d8 + ", " + d9 + ")");
                     this.a(this.y, this.z, this.q, this.player.yaw, this.player.pitch);
                     return;
                 }
@@ -384,8 +392,32 @@ public class PlayerConnection implements PacketPlayInListener {
                 float f4 = 0.0625F;
                 boolean flag = worldserver.getCubes(this.player, this.player.boundingBox.clone().shrink((double) f4, (double) f4, (double) f4)).isEmpty();
 
+                // TODO: Actually do an effect after jumping
                 if (this.player.onGround && !packetplayinflying.i() && d5 > 0.0D) {
-                    this.player.bj();
+                	// If the packet contains movement information then we update the To location with the correct XYZ.
+                    if (packetplayinflying.hasPos) {
+                        to.setX(packetplayinflying.x);
+                        to.setY(packetplayinflying.y);
+                        to.setZ(packetplayinflying.z);
+                    }
+
+                    // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                    if (packetplayinflying.hasLook) {
+                        to.setYaw(packetplayinflying.yaw);
+                        to.setPitch(packetplayinflying.pitch);
+                    }
+                	// Paper start - Add player jump event
+                	PlayerJumpEvent event = new PlayerJumpEvent(player, from, to);
+                	
+                	if (event.callEvent()) {
+                		this.player.jump();
+                	} else {
+                		from = event.getFrom();
+                		teleport(from);
+                		return;
+                	}
+                	// Paper end
+                    //this.player.jump();
                 }
 
                 this.player.move(d4, d5, d6);
@@ -404,9 +436,10 @@ public class PlayerConnection implements PacketPlayInListener {
                 boolean flag1 = false;
 
                 // Spigot: make "moved wrongly" limit configurable
+                //Bukkit.broadcastMessage("DEBUG (Moved Wrongly): d10 = " + d10); // TODO: remove after correct
                 if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
                     flag1 = true;
-                    c.warn(this.player.getName() + " moved wrongly!");
+                    logger.warn(this.player.getName() + " moved wrongly!");
                 }
 
                 this.player.setLocation(d1, d2, d3, f2, f3);
@@ -420,10 +453,11 @@ public class PlayerConnection implements PacketPlayInListener {
                 AxisAlignedBB axisalignedbb = this.player.boundingBox.clone().grow((double) f4, (double) f4, (double) f4).a(0.0D, -0.55D, 0.0D);
 
                 if (!this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly && !worldserver.c(axisalignedbb)) { // CraftBukkit - check abilities instead of creative mode
-                    if (d11 >= -0.03125D) {
+                	//Bukkit.broadcastMessage("DEBUG (Fly): d11 = " + d11 + "; f = " + f); // TODO: remove after correct
+                	if (d11 >= -0.03125D) {
                         ++this.f;
                         if (this.f > 80) {
-                            c.warn(this.player.getName() + " was kicked for floating too long!");
+                            logger.warn(this.player.getName() + " was kicked for floating too long!");
                             this.disconnect("Flying is not enabled on this server");
                             return;
                         }
@@ -466,13 +506,8 @@ public class PlayerConnection implements PacketPlayInListener {
         f1 = dest.getPitch();
 
         // TODO: make sure this is the best way to address this.
-        if (Float.isNaN(f)) {
-            f = 0;
-        }
-
-        if (Float.isNaN(f1)) {
-            f1 = 0;
-        }
+        if (Float.isNaN(f)) f = 0;
+        if (Float.isNaN(f1)) f1 = 0;
 
         this.lastPosX = d0;
         this.lastPosY = d1;
@@ -504,8 +539,8 @@ public class PlayerConnection implements PacketPlayInListener {
             } else {
                 // Else we increment the drop count and check the amount.
                 this.dropCount++;
-                if (this.dropCount >= 20) {
-                    this.c.warn(this.player.getName() + " dropped their items too quickly!");
+                if (this.dropCount >= 12) { // TODO: default = 20
+                    logger.warn(this.player.getName() + " dropped their items too quickly!");
                     this.disconnect("You dropped your items too quickly (Hacking?)");
                     return;
                 }
@@ -522,11 +557,9 @@ public class PlayerConnection implements PacketPlayInListener {
             if (packetplayinblockdig.g() == 0) {
                 flag = true;
             }
-
             if (packetplayinblockdig.g() == 1) {
                 flag = true;
             }
-
             if (packetplayinblockdig.g() == 2) {
                 flag = true;
             }
@@ -542,6 +575,9 @@ public class PlayerConnection implements PacketPlayInListener {
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
                 if (d3 > 36.0D) {
+                	if (worldserver.isChunkLoaded(i >> 4, k >> 4)) { // Paper - Fix block break desync - Don't send for unloaded chunks
+                		this.sendPacket(new PacketPlayOutBlockChange(i, j, k, worldserver)); // Paper - Fix block break desync
+                	}
                     return;
                 }
 
@@ -587,12 +623,11 @@ public class PlayerConnection implements PacketPlayInListener {
         // PaperSpigot - Allow disabling the player interaction limiter
         if (org.github.paperspigot.PaperSpigotConfig.interactLimitEnabled && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
             throttled = true;
-        } else if ( packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1 )
-        {
+        } else if (packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1) {
             lastPlace = packetplayinblockplace.timestamp;
             packets = 0;
         }
-    // Spigot end
+        // Spigot end
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
         // CraftBukkit start
@@ -637,10 +672,10 @@ public class PlayerConnection implements PacketPlayInListener {
             int itemstackAmount = itemstack.count;
             // Spigot start - skip the event if throttled
             if (!throttled) {
-            org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
-            if (event.useItemInHand() != Event.Result.DENY) {
-                this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
-            }
+	            org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
+	            if (event.useItemInHand() != Event.Result.DENY) {
+	                this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
+	            }
             }
             // Spigot end
 
@@ -673,29 +708,13 @@ public class PlayerConnection implements PacketPlayInListener {
 
         if (flag) {
             this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(i, j, k, worldserver));
-            if (l == 0) {
-                --j;
-            }
-
-            if (l == 1) {
-                ++j;
-            }
-
-            if (l == 2) {
-                --k;
-            }
-
-            if (l == 3) {
-                ++k;
-            }
-
-            if (l == 4) {
-                --i;
-            }
-
-            if (l == 5) {
-                ++i;
-            }
+            
+            if (l == 0) --j;
+            if (l == 1) ++j;
+            if (l == 2) --k;
+            if (l == 3) ++k;
+            if (l == 4) --i;
+            if (l == 5) ++i;
 
             this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(i, j, k, worldserver));
         }
@@ -728,7 +747,7 @@ public class PlayerConnection implements PacketPlayInListener {
             this.processedDisconnect = true;
         }
         // CraftBukkit end
-        c.info(this.player.getName() + " lost connection: " + ichatbasecomponent.c()); // CraftBukkit - Don't toString the component
+        logger.info(this.player.getName() + " lost connection: " + ichatbasecomponent.c()); // CraftBukkit - Don't toString the component
         this.minecraftServer.az();
         // CraftBukkit start - Replace vanilla quit message handling with our own.
         /*
@@ -745,36 +764,28 @@ public class PlayerConnection implements PacketPlayInListener {
         }
         // CraftBukkit end
         if (this.minecraftServer.N() && this.player.getName().equals(this.minecraftServer.M())) {
-            c.info("Stopping singleplayer server as player logged out");
+            logger.info("Stopping singleplayer server as player logged out");
             this.minecraftServer.safeShutdown();
         }
     }
 
     public void sendPacket(Packet packet) {
         // Spigot start - protocol patch
-        if ( NetworkManager.a( networkManager ).attr( NetworkManager.protocolVersion ).get() >= 17 )
-        {
-            if ( packet instanceof PacketPlayOutWindowItems )
-            {
+        if (NetworkManager.a(networkManager).attr(NetworkManager.protocolVersion).get() >= 17) {
+            if (packet instanceof PacketPlayOutWindowItems) {
                 PacketPlayOutWindowItems items = (PacketPlayOutWindowItems) packet;
-                if ( player.activeContainer instanceof ContainerEnchantTable
-                        && player.activeContainer.windowId == items.a )
-                {
+                if (player.activeContainer instanceof ContainerEnchantTable && player.activeContainer.windowId == items.a) {
                     ItemStack[] old = items.b;
-                    items.b = new ItemStack[ old.length + 1 ];
-                    items.b[ 0 ] = old[ 0 ];
-                    System.arraycopy( old, 1, items.b, 2, old.length - 1 );
-                    items.b[ 1 ] = new ItemStack( Items.INK_SACK, 3, 4 );
+                    items.b = new ItemStack[old.length + 1];
+                    items.b[0] = old[0];
+                    System.arraycopy(old, 1, items.b, 2, old.length - 1);
+                    items.b[1] = new ItemStack(Items.INK_SACK, 3, 4);
 
                 }
-            } else if ( packet instanceof PacketPlayOutSetSlot )
-            {
+            } else if (packet instanceof PacketPlayOutSetSlot) {
                 PacketPlayOutSetSlot items = (PacketPlayOutSetSlot) packet;
-                if ( player.activeContainer instanceof ContainerEnchantTable
-                        && player.activeContainer.windowId == items.a )
-                {
-                    if ( items.b >= 1 )
-                    {
+                if (player.activeContainer instanceof ContainerEnchantTable && player.activeContainer.windowId == items.a) {
+                    if (items.b >= 1) {
                         items.b++;
                     }
                 }
@@ -804,12 +838,12 @@ public class PlayerConnection implements PacketPlayInListener {
         // CraftBukkit end
 
         try {
-            this.networkManager.handle(packet, new GenericFutureListener[0]);
+            this.networkManager.handle(packet);
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Sending packet");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Packet being sent");
 
-            crashreportsystemdetails.a("Packet class", (Callable) (new CrashReportConnectionPacketClass(this, packet)));
+            crashreportsystemdetails.a("Packet class", new CrashReportConnectionPacketClass(this, packet));
             throw new ReportedException(crashreport);
         }
     }
@@ -831,7 +865,7 @@ public class PlayerConnection implements PacketPlayInListener {
             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.c();
             this.player.v();
         } else {
-            c.warn(this.player.getName() + " tried to set an invalid carried item");
+            logger.warn(this.player.getName() + " tried to set an invalid carried item");
             this.disconnect("Invalid hotbar selection (Hacking?)"); // CraftBukkit //Spigot "Nope" -> Descriptive reason
         }
     }
@@ -886,15 +920,13 @@ public class PlayerConnection implements PacketPlayInListener {
                     this.minecraftServer.server.playerCommandState = false;
                 }
             } else if (s.isEmpty()) {
-                c.warn(this.player.getName() + " tried to send an empty message");
+                logger.warn(this.player.getName() + " tried to send an empty message");
             } else if (getPlayer().isConversing()) {
                 // Spigot start
                 final String message = s;
-                this.minecraftServer.processQueue.add( new Waitable()
-                {
+                this.minecraftServer.processQueue.add(new Waitable() {
                     @Override
-                    protected Object evaluate()
-                    {
+                    protected Object evaluate() {
                         getPlayer().acceptConversationInput( message );
                         return null;
                     }
@@ -910,16 +942,13 @@ public class PlayerConnection implements PacketPlayInListener {
                 // CraftBukkit end - the below is for reference. :)
             } else {
                 ChatMessage chatmessage1 = new ChatMessage("chat.type.text", new Object[] { this.player.getScoreboardDisplayName(), s});
-
                 this.minecraftServer.getPlayerList().sendMessage(chatmessage1, false);
             }
 
             // Spigot - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
-            {
-                if ( exclude != null && s.startsWith( exclude ) )
-                {
+            for (String exclude : org.spigotmc.SpigotConfig.spamExclusions) {
+                if (exclude != null && s.startsWith(exclude)) {
                     counted = false;
                     break;
                 }
@@ -960,6 +989,29 @@ public class PlayerConnection implements PacketPlayInListener {
         }
 
         if (!async && s.startsWith("/")) {
+        	// Paper Start
+        	if (!org.bukkit.Bukkit.isPrimaryThread()) {
+        		final String fCommandLine = s;
+        		MinecraftServer.getLogger().log(org.apache.logging.log4j.Level.ERROR, "Command Dispatched Async: " + fCommandLine);
+        		MinecraftServer.getLogger().log(org.apache.logging.log4j.Level.ERROR, "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
+        		Waitable wait = new Waitable() {
+        			@Override
+        			protected Object evaluate() {
+        				chat(fCommandLine, false);
+        				return null;
+        			}
+        		};
+        		minecraftServer.processQueue.add(wait);
+        		try {
+        			wait.get();
+        			return;
+        		} catch (InterruptedException e) {
+        			Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+        		} catch (Exception e) {
+        			throw new RuntimeException("Exception processing chat command", e.getCause());
+        		}
+        	}
+        	// Paper End
             this.handleCommand(s);
         } else if (this.player.getChatFlags() == EnumChatVisibility.SYSTEM) {
             // Do nothing, this is coming from a plugin
@@ -967,7 +1019,25 @@ public class PlayerConnection implements PacketPlayInListener {
             Player player = this.getPlayer();
             AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet());
             this.server.getPluginManager().callEvent(event);
+            
+            // Rinny start - Chat is already only async fuck no async chat (Remove non async chat will improve server perfomance)
+            if (event.isCancelled()) {
+                return;
+            }
 
+            s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+            minecraftServer.console.sendMessage(s);
+            if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+                for (Object recipient : minecraftServer.getPlayerList().players) {
+                    ((EntityPlayer) recipient).sendMessage(CraftChatMessage.fromString(s));
+                }
+            } else {
+                for (Player recipient : event.getRecipients()) {
+                    recipient.sendMessage(s);
+                }
+            }
+            
+            /*
             if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
                 // Evil plugins still listening to deprecated event
                 final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
@@ -1022,7 +1092,8 @@ public class PlayerConnection implements PacketPlayInListener {
                         recipient.sendMessage(s);
                     }
                 }
-            }
+            }*/
+            // Rinny end
         }
     }
     // CraftBukkit end
@@ -1031,7 +1102,7 @@ public class PlayerConnection implements PacketPlayInListener {
         org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.startTiming(); // Spigot
 
         // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) this.c.info(this.player.getName() + " issued server command: " + s);
+        if (org.spigotmc.SpigotConfig.logCommands) logger.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
@@ -1121,7 +1192,37 @@ public class PlayerConnection implements PacketPlayInListener {
         }
         // CraftBukkit end
 
-        if (packetplayinentityaction.d() == 1) {
+        switch (packetplayinentityaction.d()) {
+		case 1:
+			this.player.setSneaking(true);
+			break;
+		case 2:
+			this.player.setSneaking(false);
+			break;
+		case 3:
+			this.player.a(false, true, true);
+            //this.checkMovement = false; // CraftBukkit - this is handled in teleport
+			break;
+		case 4:
+			this.player.setSprinting(true);
+			break;
+		case 5:
+			this.player.setSprinting(false);
+			break;
+		case 6:
+			if (this.player.vehicle != null && this.player.vehicle instanceof EntityHorse) {
+                ((EntityHorse) this.player.vehicle).w(packetplayinentityaction.e());
+            }
+			break;
+		case 7:
+			if (this.player.vehicle != null && this.player.vehicle instanceof EntityHorse) {
+	            ((EntityHorse) this.player.vehicle).g(this.player);
+			}
+			break;
+		default:
+			break;
+		}
+        /*if (packetplayinentityaction.d() == 1) {
             this.player.setSneaking(true);
         } else if (packetplayinentityaction.d() == 2) {
             this.player.setSneaking(false);
@@ -1138,18 +1239,17 @@ public class PlayerConnection implements PacketPlayInListener {
             }
         } else if (packetplayinentityaction.d() == 7 && this.player.vehicle != null && this.player.vehicle instanceof EntityHorse) {
             ((EntityHorse) this.player.vehicle).g(this.player);
-        }
+        }*/
     }
 
     public void a(PacketPlayInUseEntity packetplayinuseentity) {
-        if ( packetplayinuseentity.c() == null ) return; // Spigot - protocol patch
+        if (packetplayinuseentity.c() == null) return; // Spigot - protocol patch
         if (this.player.dead) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         Entity entity = packetplayinuseentity.a((World) worldserver);
         // Spigot Start
-        if ( entity == player )
-        {
-            disconnect( "Cannot interact with self!" );
+        if (entity == player) {
+            disconnect("Cannot interact with self!");
             return;
         }
         // Spigot End
@@ -1239,15 +1343,12 @@ public class PlayerConnection implements PacketPlayInListener {
                 if (this.player.getHealth() > 0.0F) {
                     return;
                 }
-
                 this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
             }
             break;
-
         case 2:
             this.player.getStatisticManager().a(this.player);
             break;
-
         case 3:
             this.player.a((Statistic) AchievementList.f);
         }
@@ -1274,15 +1375,11 @@ public class PlayerConnection implements PacketPlayInListener {
 
             InventoryView inventory = this.player.activeContainer.getBukkitView();
             // Spigot start - protocol patch
-            if ( NetworkManager.a( networkManager ).attr( NetworkManager.protocolVersion ).get() >= 17 )
-            {
-                if ( player.activeContainer instanceof ContainerEnchantTable )
-                {
-                    if ( packetplayinwindowclick.slot == 1 )
-                    {
+            if (NetworkManager.a(networkManager).attr(NetworkManager.protocolVersion).get() >= 17) {
+                if (player.activeContainer instanceof ContainerEnchantTable) {
+                    if (packetplayinwindowclick.slot == 1) {
                         return;
-                    } else if ( packetplayinwindowclick.slot > 1 )
-                    {
+                    } else if (packetplayinwindowclick.slot > 1) {
                         packetplayinwindowclick.slot--;
                     }
                 }
@@ -1486,10 +1583,7 @@ public class PlayerConnection implements PacketPlayInListener {
                     case DEFAULT:
                         itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.d(), packetplayinwindowclick.e(), packetplayinwindowclick.h(), this.player);
                         // PaperSpigot start - Stackable Buckets
-                        if (itemstack != null &&
-                                ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) ||
-                                (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
+                        if (itemstack != null && ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) || (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) || (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
                             if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                                 this.player.updateInventory(this.player.activeContainer);
                             } else {
@@ -1562,13 +1656,13 @@ public class PlayerConnection implements PacketPlayInListener {
                 this.n.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.f()));
                 this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.c(), packetplayinwindowclick.f(), false));
                 this.player.activeContainer.a(this.player, false);
-                ArrayList arraylist = new ArrayList();
+                List<ItemStack> list = new ArrayList<ItemStack>();
 
-                for (int i = 0; i < this.player.activeContainer.c.size(); ++i) {
-                    arraylist.add(((Slot) this.player.activeContainer.c.get(i)).getItem());
+                for (int i = 0; i < this.player.activeContainer.slots.size(); ++i) {
+                    list.add(this.player.activeContainer.slots.get(i).getItem());
                 }
 
-                this.player.a(this.player.activeContainer, arraylist);
+                this.player.a(this.player.activeContainer, list);
 
                 // CraftBukkit start - Send a Set Slot to update the crafting result slot
                 if (type == SlotType.RESULT && itemstack != null) {
@@ -1642,7 +1736,6 @@ public class PlayerConnection implements PacketPlayInListener {
                 } else {
                     this.player.defaultContainer.setItem(packetplayinsetcreativeslot.c(), itemstack);
                 }
-
                 this.player.defaultContainer.a(this.player, true);
             } else if (flag && flag2 && flag3 && this.x < 200) {
                 this.x += 20;
@@ -1652,16 +1745,9 @@ public class PlayerConnection implements PacketPlayInListener {
                     entityitem.e();
                 }
             // Spigot start - protocol patch
-            } else
-            {
-                if ( flag1 )
-                {
-                    player.playerConnection.sendPacket(
-                            new PacketPlayOutSetSlot( 0,
-                                    packetplayinsetcreativeslot.c(),
-                                    player.defaultContainer.getSlot( packetplayinsetcreativeslot.c() ).getItem()
-                            )
-                    );
+            } else {
+                if (flag1) {
+                    player.playerConnection.sendPacket(new PacketPlayOutSetSlot(0, packetplayinsetcreativeslot.c(), player.defaultContainer.getSlot(packetplayinsetcreativeslot.c()).getItem()));
                 }
             }
             // Spigot end
@@ -1690,7 +1776,7 @@ public class PlayerConnection implements PacketPlayInListener {
             if (tileentity instanceof TileEntitySign) {
                 TileEntitySign tileentitysign = (TileEntitySign) tileentity;
 
-                if (!tileentitysign.a() || tileentitysign.b() != this.player) {
+                if (!tileentitysign.a() || tileentitysign.signEditor == null || !tileentitysign.signEditor.equals(this.player.getUniqueID())) { // Paper // tileentitysign.b() != this.player) {
                     this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
                     this.sendPacket(new PacketPlayOutUpdateSign(packetplayinupdatesign.c(), packetplayinupdatesign.d(), packetplayinupdatesign.e(), tileentitysign.lines)); // CraftBukkit
                     return;
@@ -1771,16 +1858,15 @@ public class PlayerConnection implements PacketPlayInListener {
     }
 
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
-        ArrayList arraylist = Lists.newArrayList();
+        List list = Lists.newArrayList();
         Iterator iterator = this.minecraftServer.a(this.player, packetplayintabcomplete.c()).iterator();
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
-
-            arraylist.add(s);
+            list.add(s);
         }
 
-        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[arraylist.size()])));
+        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) list.toArray(new String[list.size()])));
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
@@ -1823,7 +1909,7 @@ public class PlayerConnection implements PacketPlayInListener {
                 }
                 // CraftBukkit start
             } catch (Exception exception) {
-                c.error("Couldn\'t handle book info", exception);
+                logger.error("Couldn\'t handle book info", exception);
                 this.disconnect("Invalid book data!");
                 return;
                 // CraftBukkit end
@@ -1864,7 +1950,7 @@ public class PlayerConnection implements PacketPlayInListener {
                 }
                 // CraftBukkit start
             } catch (Throwable exception1) {
-                c.error("Couldn\'t sign book", exception1);
+                logger.error("Couldn\'t sign book", exception1);
                 this.disconnect("Invalid book data!");
                 // CraftBukkit end
                 return;
@@ -1888,7 +1974,7 @@ public class PlayerConnection implements PacketPlayInListener {
                     }
                     // CraftBukkit start
                 } catch (Throwable exception2) {
-                    c.error("Couldn\'t select trade", exception2);
+                    logger.error("Couldn\'t select trade", exception2);
                     this.disconnect("Invalid trade data!");
                     // CraftBukkit end
                 }
@@ -1925,7 +2011,7 @@ public class PlayerConnection implements PacketPlayInListener {
                         }
                         // CraftBukkit start
                     } catch (Throwable exception3) {
-                        c.error("Couldn\'t set command block", exception3);
+                        logger.error("Couldn\'t set command block", exception3);
                         this.disconnect("Invalid CommandBlock data!");
                         // CraftBukkit end
                     } finally {
@@ -1953,7 +2039,7 @@ public class PlayerConnection implements PacketPlayInListener {
                         }
                         // CraftBukkit start
                     } catch (Throwable exception4) {
-                        c.error("Couldn\'t set beacon", exception4);
+                        logger.error("Couldn\'t set beacon", exception4);
                         this.disconnect("Invalid beacon data!");
                         // CraftBukkit end
                     }
@@ -2005,7 +2091,8 @@ public class PlayerConnection implements PacketPlayInListener {
 
     // CraftBukkit start - Add "isDisconnected" method
     public boolean isDisconnected() {
-        return !this.player.joining && !NetworkManager.a(this.networkManager).config().isAutoRead();
+        //return !this.player.joining && !NetworkManager.a(this.networkManager).config().isAutoRead();
+        return (!this.player.joining && !this.networkManager.isConnected()) || this.processedDisconnect; // Paper
     }
     // CraftBukkit end
 }
-- 
2.19.1.windows.1


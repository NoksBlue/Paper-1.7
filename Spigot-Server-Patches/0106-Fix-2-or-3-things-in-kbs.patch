From 8a1bf58206445f84a934928db98734b57322c9ca Mon Sep 17 00:00:00 2001
From: Noksio <noksiopro@gmail.com>
Date: Sun, 30 Jun 2019 20:43:01 -0400
Subject: [PATCH] Fix 2 or 3 things in kbs


diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index f78a2a02..f9bc15cd 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -1,22 +1,32 @@
 package net.minecraft.server;
 
+// CraftBukkit start
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 
-// CraftBukkit start
-import java.util.ArrayList;
-import com.google.common.base.Function;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
 // CraftBukkit end
 
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import com.google.common.base.Function;
+import com.google.common.collect.ImmutableSet;
 
 public abstract class EntityLiving extends Entity {
 
@@ -24,7 +34,7 @@ public abstract class EntityLiving extends Entity {
     private static final AttributeModifier c = (new AttributeModifier(b, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
     private AttributeMapBase d;
     public CombatTracker combatTracker = new CombatTracker(this); // CraftBukkit - private -> public, remove final
-    public final HashMap effects = new HashMap(); // CraftBukkit - protected -> public
+    public final Map<Integer, MobEffect> effects = new ConcurrentHashMap<Integer, MobEffect>(); // CraftBukkit - protected -> public
     private final ItemStack[] g = new ItemStack[5];
     public boolean at;
     public int au;
@@ -385,10 +394,10 @@ public abstract class EntityLiving extends Entity {
 
         if (!this.effects.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.effects.values().iterator();
+            Iterator<MobEffect> iterator = this.effects.values().iterator();
 
             while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
+                MobEffect mobeffect = iterator.next();
 
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
@@ -648,116 +699,113 @@ public abstract class EntityLiving extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable()) {
             return false;
-        } else if (this.world.isStatic) {
+        }
+        if (this.world.isStatic) {
             return false;
+        }
+        this.aU = 0;
+        if (this.getHealth() <= 0.0F) {
+        	return false;
+        }
+        if (damagesource.o() && this.hasEffect(MobEffectList.FIRE_RESISTANCE)) {
+        	return false;
+        }
+        // CraftBukkit - Moved into d(DamageSource, float)
+        /*if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(4) != null) {
+        	this.getEquipment(4).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
+        	f *= 0.75F;
+        }*/
+
+        this.aF = 1.5F;
+        boolean flag = true;
+
+        if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
+        	if (f <= this.lastDamage) {
+        		return false;
+        	}
+
+        	// CraftBukkit start
+        	if (!this.d(damagesource, f - this.lastDamage)) {
+        		return false;
+        	}
+        	// CraftBukkit end
+        	this.lastDamage = f;
+        	flag = false;
         } else {
-            this.aU = 0;
-            if (this.getHealth() <= 0.0F) {
-                return false;
-            } else if (damagesource.o() && this.hasEffect(MobEffectList.FIRE_RESISTANCE)) {
-                return false;
-            } else {
-                // CraftBukkit - Moved into d(DamageSource, float)
-                if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(4) != null) {
-                    this.getEquipment(4).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
-                    f *= 0.75F;
-                }
-
-                this.aF = 1.5F;
-                boolean flag = true;
-
-                if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
-                    if (f <= this.lastDamage) {
-                        return false;
-                    }
-
-                    // CraftBukkit start
-                    if (!this.d(damagesource, f - this.lastDamage)) {
-                        return false;
-                    }
-                    // CraftBukkit end
-                    this.lastDamage = f;
-                    flag = false;
-                } else {
-                    // CraftBukkit start
-                    float previousHealth = this.getHealth();
-                    if (!this.d(damagesource, f)) {
-                        return false;
-                    }
-                    this.lastDamage = f;
-                    this.aw = previousHealth;
-                    this.noDamageTicks = this.maxNoDamageTicks;
-                    // CraftBukkit end
-                    this.hurtTicks = this.ay = 10;
-                }
-
-                this.az = 0.0F;
-                Entity entity = damagesource.getEntity();
-
-                if (entity != null) {
-                    if (entity instanceof EntityLiving) {
-                        this.b((EntityLiving) entity);
-                    }
-
-                    if (entity instanceof EntityHuman) {
-                        this.lastDamageByPlayerTime = 100;
-                        this.killer = (EntityHuman) entity;
-                    } else if (entity instanceof EntityWolf) {
-                        EntityWolf entitywolf = (EntityWolf) entity;
-
-                        if (entitywolf.isTamed()) {
-                            this.lastDamageByPlayerTime = 100;
-                            this.killer = null;
-                        }
-                    }
-                }
-
-                // PaperSpigot start - Disable explosion knockback
-                boolean knockbackCancelled = false;
-                if (flag && !(knockbackCancelled = world.paperSpigotConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
-                // PaperSpigot end
-                    this.world.broadcastEntityEffect(this, (byte) 2);
-                    if (damagesource != DamageSource.DROWN) {
-                        this.Q();
-                    }
-
-                    if (entity != null) {
-                        double d0 = entity.locX - this.locX;
-
-                        double d1;
-
-                        for (d1 = entity.locZ - this.locZ; d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
-                            d0 = (Math.random() - Math.random()) * 0.01D;
-                        }
-
-                        this.az = (float) (Math.atan2(d1, d0) * 180.0D / 3.1415927410125732D) - this.yaw;
-                        this.a(entity, f, d0, d1);
-                    } else {
-                        this.az = (float) ((int) (Math.random() * 2.0D) * 180);
-                    }
-                }
-
-                if (knockbackCancelled) this.world.broadcastEntityEffect(this, (byte) 2); // PaperSpigot - Disable explosion knockback
-
-                String s;
-
-                if (this.getHealth() <= 0.0F) {
-                    s = this.aU();
-                    if (flag && s != null) {
-                        this.makeSound(s, this.bf(), this.bg());
-                    }
-
-                    this.die(damagesource);
-                } else {
-                    s = this.aT();
-                    if (flag && s != null) {
-                        this.makeSound(s, this.bf(), this.bg());
-                    }
-                }
+        	// CraftBukkit start
+        	float previousHealth = this.getHealth();
+        	if (!this.d(damagesource, f)) {
+        		return false;
+        	}
+        	this.lastDamage = f;
+        	this.aw = previousHealth;
+        	this.noDamageTicks = this.maxNoDamageTicks;
+        	// CraftBukkit end
+        	this.hurtTicks = this.ay = 10;
+        }
+        this.az = 0.0F;
+        Entity entity = damagesource.getEntity();
 
-                return true;
-            }
+        if (entity != null) {
+        	if (entity instanceof EntityLiving) {
+        		this.b((EntityLiving) entity);
+        	}
+        	if (entity instanceof EntityHuman) {
+        		this.lastDamageByPlayerTime = 100;
+        		this.killer = (EntityHuman) entity;
+        	} else if (entity instanceof EntityWolf) {
+        		EntityWolf entitywolf = (EntityWolf) entity;
+
+        		if (entitywolf.isTamed()) {
+        			this.lastDamageByPlayerTime = 100;
+        			this.killer = null;
+        		}
+        	}
+        }
+
+        // PaperSpigot start - Disable explosion knockback
+        boolean knockbackCancelled = false;
+        if (flag && !(knockbackCancelled = world.paperSpigotConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
+        	// PaperSpigot end
+        	this.world.broadcastEntityEffect(this, (byte) 2);
+        	if (damagesource != DamageSource.DROWN) {
+        		this.Q();
+        	}
+        	if (entity != null) {
+        		double d0 = entity.locX - this.locX;
+        		double d1 = entity.locZ - this.locZ;
+                        
+        		/*if (d0 * d0 + d1 * d1 < 1.0E-4D) {
+					d0 = (Math.random() - Math.random()) * 0.01D;
+					d1 = (Math.random() - Math.random()) * 0.01D;
+				}*/
+        		/*for (d1 = entity.locZ - this.locZ; d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
+					d0 = (Math.random() - Math.random()) * 0.01D;
+				}*/
+        		this.az = (float) (Math.atan2(d1, d0) * 180.0D / 3.1415927410125732D) - this.yaw;
+        		this.a(entity, d0, d1);
+        	} else {
+        		this.az = (float) ((int) (Math.random() * 2.0D) * 180);
+        	}
+        }
+
+        if (knockbackCancelled) this.world.broadcastEntityEffect(this, (byte) 2); // PaperSpigot - Disable explosion knockback
+
+        String s;
+        if (this.getHealth() <= 0.0F) {
+        	s = this.aU();
+        	if (flag && s != null) {
+        		this.makeSound(s, this.bf(), this.bg());
+        	}
+        	this.die(damagesource);
+        } else {
+        	s = this.aT();
+        	if (flag && s != null) {
+        		this.makeSound(s, this.bf(), this.bg());
+        	}
         }
+        return true;
     }
 
     public void a(ItemStack itemstack) {
@@ -825,21 +873,27 @@ public abstract class EntityLiving extends Entity {
 
     protected void dropEquipment(boolean flag, int i) {}
 
-    public void a(Entity entity, float f, double d0, double d1) {
+    public void a(Entity entity, double xo, double zo) {
+    	 // Rinny start
         if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
             this.al = true;
-            float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
-            float f2 = 0.4F;
-
-            this.motX /= 2.0D;
-            this.motY /= 2.0D;
-            this.motZ /= 2.0D;
-            this.motX -= d0 / (double) f1 * (double) f2;
-            this.motY += (double) f2;
-            this.motZ -= d1 / (double) f1 * (double) f2;
-            if (this.motY > 0.4000000059604645D) {
-                this.motY = 0.4000000059604645D;
+            double magnitude = MathHelper.sqrt(xo * xo + zo * zo);
+            double d2 = 0.4D;
+            double friction = 2.0D;
+            
+            this.motX /= friction;
+        	this.motY /= friction;
+        	this.motZ /= friction;
+        	
+            this.motX -= xo / magnitude * d2;
+        	this.motY = MathHelper.limit(this.motY + d2, 0.05D, 0.4);
+        	this.motZ -= zo / magnitude * d2;
+			// Rinny stop
         }
     }
 
@@ -909,11 +963,9 @@ public abstract class EntityLiving extends Entity {
 
             if (itemstack != null && itemstack.getItem() instanceof ItemArmor) {
                 int l = ((ItemArmor) itemstack.getItem()).c;
-
                 i += l;
             }
         }
-
         return i;
     }
 
@@ -1222,7 +1274,7 @@ public abstract class EntityLiving extends Entity {
         this.enderTeleportTo(d0, d1, d2);
     }
 
-    protected void bj() {
+    protected void jump() {
         this.motY = 0.41999998688697815D;
         if (this.hasEffect(MobEffectList.JUMP)) {
             this.motY += (double) ((float) (this.getEffect(MobEffectList.JUMP).getAmplifier() + 1) * 0.1F);
@@ -1288,7 +1340,7 @@ public abstract class EntityLiving extends Entity {
             if (this.h_()) {
                 float f5 = 0.15F;
 
-                if (this.motX < (double) (-f5)) {
+                /*if (this.motX < (double) (-f5)) {
                     this.motX = (double) (-f5);
                 }
 
@@ -1302,7 +1354,10 @@ public abstract class EntityLiving extends Entity {
 
                 if (this.motZ > (double) f5) {
                     this.motZ = (double) f5;
-                }
+                }*/
+                
+                this.motX = MathHelper.a(this.motX, (double) (-f5), (double) f5);
+                this.motZ = MathHelper.a(this.motZ, (double) (-f5), (double) f5);
 
                 this.fallDistance = 0.0F;
                 if (this.motY < -0.15D) {
@@ -1567,7 +1622,7 @@ public abstract class EntityLiving extends Entity {
         if (this.bc) {
             if (!this.M() && !this.P()) {
                 if (this.onGround && this.bq == 0) {
-                    this.bj();
+                    this.jump();
                     this.bq = 10;
                 }
             } else {
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
new file mode 100644
index 00000000..47b5118a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -0,0 +1,217 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class MathHelper {
+	private static float[] a = new float[65536];
+
+	static {
+		for (int i = 0; i < 65536; i++) {
+			a[i] = ((float) Math.sin(i * 3.141592653589793D * 2.0D / 65536.0D));
+		}
+	}
+
+	public static final float sin(float paramFloat) {
+		return a[((int) (paramFloat * 10430.378F) & 0xFFFF)];
+	}
+
+	public static final float cos(float paramFloat) {
+		return a[((int) (paramFloat * 10430.378F + 16384.0F) & 0xFFFF)];
+	}
+
+	public static final float c(float paramFloat) {
+		return (float) Math.sqrt(paramFloat);
+	}
+
+	public static final float sqrt(double paramDouble) {
+		return (float) Math.sqrt(paramDouble);
+	}
+
+	public static int d(float paramFloat) {
+		int i = (int) paramFloat;
+		return paramFloat < i ? i - 1 : i;
+	}
+
+	public static int floor(double paramDouble) {
+		int i = (int) paramDouble;
+		return paramDouble < i ? i - 1 : i;
+	}
+
+	public static long d(double paramDouble) {
+		long l = (long) paramDouble;
+		return paramDouble < l ? l - 1L : l;
+	}
+
+	public static float abs(float paramFloat) {
+		return paramFloat >= 0.0F ? paramFloat : -paramFloat;
+	}
+
+	public static int a(int paramInt) {
+		return paramInt >= 0 ? paramInt : -paramInt;
+	}
+
+	public static int f(float paramFloat) {
+		int i = (int) paramFloat;
+		return paramFloat > i ? i + 1 : i;
+	}
+
+	public static int f(double paramDouble) {
+		int i = (int) paramDouble;
+		return paramDouble > i ? i + 1 : i;
+	}
+
+	public static int a(int paramInt1, int paramInt2, int paramInt3) {
+		if (paramInt1 < paramInt2) {
+			return paramInt2;
+		}
+		if (paramInt1 > paramInt3) {
+			return paramInt3;
+		}
+		return paramInt1;
+	}
+
+	public static float a(float paramFloat1, float paramFloat2, float paramFloat3) {
+		if (paramFloat1 < paramFloat2) {
+			return paramFloat2;
+		}
+		if (paramFloat1 > paramFloat3) {
+			return paramFloat3;
+		}
+		return paramFloat1;
+	}
+
+	public static double a(double paramDouble1, double paramDouble2, double paramDouble3) {
+		if (paramDouble1 < paramDouble2) {
+			return paramDouble2;
+		}
+		if (paramDouble1 > paramDouble3) {
+			return paramDouble3;
+		}
+		return paramDouble1;
+	}
+
+	public static double b(double paramDouble1, double paramDouble2, double paramDouble3) {
+		if (paramDouble3 < 0.0D) {
+			return paramDouble1;
+		}
+		if (paramDouble3 > 1.0D) {
+			return paramDouble2;
+		}
+		return paramDouble1 + (paramDouble2 - paramDouble1) * paramDouble3;
+	}
+
+	public static double a(double paramDouble1, double paramDouble2) {
+		if (paramDouble1 < 0.0D) {
+			paramDouble1 = -paramDouble1;
+		}
+		if (paramDouble2 < 0.0D) {
+			paramDouble2 = -paramDouble2;
+		}
+		return paramDouble1 > paramDouble2 ? paramDouble1 : paramDouble2;
+	}
+
+	public static int nextInt(Random paramRandom, int paramInt1, int paramInt2) {
+		if (paramInt1 >= paramInt2) {
+			return paramInt1;
+		}
+		return paramRandom.nextInt(paramInt2 - paramInt1 + 1) + paramInt1;
+	}
+
+	public static float a(Random paramRandom, float paramFloat1, float paramFloat2) {
+		if (paramFloat1 >= paramFloat2) {
+			return paramFloat1;
+		}
+		return paramRandom.nextFloat() * (paramFloat2 - paramFloat1) + paramFloat1;
+	}
+
+	public static double a(Random paramRandom, double paramDouble1, double paramDouble2) {
+		if (paramDouble1 >= paramDouble2) {
+			return paramDouble1;
+		}
+		return paramRandom.nextDouble() * (paramDouble2 - paramDouble1) + paramDouble1;
+	}
+
+	public static double a(long[] paramArrayOfLong) {
+		long l1 = 0L;
+		for (long l2 : paramArrayOfLong) {
+			l1 += l2;
+		}
+		return l1 / paramArrayOfLong.length;
+	}
+
+	public static float g(float paramFloat) {
+		paramFloat %= 360.0F;
+		if (paramFloat >= 180.0F) {
+			paramFloat -= 360.0F;
+		}
+		if (paramFloat < -180.0F) {
+			paramFloat += 360.0F;
+		}
+		return paramFloat;
+	}
+
+	public static double g(double paramDouble) {
+		paramDouble %= 360.0D;
+		if (paramDouble >= 180.0D) {
+			paramDouble -= 360.0D;
+		}
+		if (paramDouble < -180.0D) {
+			paramDouble += 360.0D;
+		}
+		return paramDouble;
+	}
+
+	public static int a(String paramString, int paramInt) {
+		int i = paramInt;
+		try {
+			i = Integer.parseInt(paramString);
+		} catch (Throwable localThrowable) {
+		}
+		return i;
+	}
+
+	public static int a(String paramString, int paramInt1, int paramInt2) {
+		int i = paramInt1;
+		try {
+			i = Integer.parseInt(paramString);
+		} catch (Throwable localThrowable) {
+		}
+		if (i < paramInt2) {
+			i = paramInt2;
+		}
+		return i;
+	}
+
+	public static double a(String paramString, double paramDouble) {
+		double d = paramDouble;
+		try {
+			d = Double.parseDouble(paramString);
+		} catch (Throwable localThrowable) {
+		}
+		return d;
+	}
+
+	public static double a(String paramString, double paramDouble1, double paramDouble2) {
+		double d = paramDouble1;
+		try {
+			d = Double.parseDouble(paramString);
+		} catch (Throwable localThrowable) {
+		}
+		if (d < paramDouble2) {
+			d = paramDouble2;
+		}
+		return d;
+	}
+	
+	public static double limit(double actual, double min, double max) {
+		//return (actual > max) ? max : (actual < min ? min : actual); // Old code
+		return Math.min(Math.max(actual, min), max); // Rinny - New code
+	}
+	
+	public static double percent(int current) {
+    	int percent = current * 100 / 100;
+    	return Math.round(percent * 10.0) / 10.0;
+    }
+
+	private static final int[] b = { 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9 };
+}
-- 
2.19.1.windows.1

